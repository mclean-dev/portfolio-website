{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = function (opts) {\n  return {\n    onResponse: function onResponse(response) {\n      var contentType = response.headers['content-type'] || '';\n      var shouldDecode = opts && opts.force || contentType.indexOf('application/json') !== -1;\n\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n\n      return objectAssign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: function processOptions(options) {\n      return objectAssign({}, options, {\n        headers: objectAssign({\n          Accept: 'application/json'\n        }, options.headers)\n      });\n    }\n  };\n};\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body);\n  } catch (err) {\n    err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n    throw err;\n  }\n}","map":{"version":3,"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAPD,GAAiB,gBAAI;AAAA,SAAK;AACxBE,cAAU,EAAE,8BAAY;AACtB,UAAMC,WAAW,GAAGC,QAAQ,CAACC,OAATD,CAAiB,cAAjBA,KAAoC,EAAxD;AACA,UAAME,YAAY,GAAIC,IAAI,IAAIA,IAAI,CAACC,KAAbD,IAAuBJ,WAAW,CAACM,OAAZN,CAAoB,kBAApBA,MAA4C,CAAC,CAA1F;;AACA,UAAI,CAACC,QAAQ,CAACM,IAAV,IAAkB,CAACP,WAAnB,IAAkC,CAACG,YAAvC,EAAqD;AACnD,eAAOF,QAAP;AACD;;AAED,aAAON,YAAY,CAAC,EAAD,EAAKM,QAAL,EAAe;AAACM,YAAI,EAAEC,QAAQ,CAACP,QAAQ,CAACM,IAAV;AAAf,OAAf,CAAnB;AARsB;AAWxBE,kBAAc,EAAE,iCAAO;AAAA,aACrBd,YAAY,CAAC,EAAD,EAAKe,OAAL,EAAc;AACxBR,eAAO,EAAEP,YAAY,CAAC;AAACgB,gBAAM,EAAE;AAAT,SAAD,EAA+BD,OAAO,CAACR,OAAvC;AADG,OAAd,CADS;AAAA;AAXC,GAAL;AAArB;;AAiBA,SAASM,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,MAAI;AACF,WAAOK,IAAI,CAACC,KAALD,CAAWL,IAAXK,CAAP;AADF,IAEE,OAAOE,GAAP,EAAY;AACZA,OAAG,CAACC,OAAJD,qDAAyDA,GAAG,CAACC,OAA7D;AACA,UAAMD,GAAN;AACD;AACF","names":["objectAssign","require","module","exports","onResponse","contentType","response","headers","shouldDecode","opts","force","indexOf","body","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/get-it/src/middleware/jsonResponse.js"],"sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return objectAssign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    objectAssign({}, options, {\n      headers: objectAssign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"script"}