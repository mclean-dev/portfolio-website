{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-empty-function, no-process-env */\n\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar _require = require('../util/observable'),\n    Observable = _require.Observable;\n\nvar _require2 = require('./errors'),\n    ClientError = _require2.ClientError,\n    ServerError = _require2.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  }\n};\nvar printWarnings = {\n  onResponse: function onResponse(res) {\n    var warn = res.headers['x-sanity-warning'];\n    var warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(function (msg) {\n      return console.warn(msg);\n    }); // eslint-disable-line no-console\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;","map":{"version":3,"sources":["/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/@sanity/client/lib/http/request.js"],"names":["getIt","require","assign","observable","jsonRequest","jsonResponse","progress","_require","Observable","_require2","ClientError","ServerError","httpError","onResponse","res","statusCode","printWarnings","warn","headers","warnings","Array","isArray","filter","Boolean","forEach","msg","console","envSpecific","middleware","concat","implementation","request","httpRequest","options","requester","arguments","length","undefined","maxRedirects","defaultRequester","module","exports"],"mappings":"AAAA;AAEA;;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,kCAAD,CAAxB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,mCAAD,CAAzB;;AAEA,IAAII,YAAY,GAAGJ,OAAO,CAAC,oCAAD,CAA1B;;AAEA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,gCAAD,CAAtB;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,oBAAD,CAAtB;AAAA,IACIO,UAAU,GAAGD,QAAQ,CAACC,UAD1B;;AAGA,IAAIC,SAAS,GAAGR,OAAO,CAAC,UAAD,CAAvB;AAAA,IACIS,WAAW,GAAGD,SAAS,CAACC,WAD5B;AAAA,IAEIC,WAAW,GAAGF,SAAS,CAACE,WAF5B;;AAIA,IAAIC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACnC,QAAIA,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,YAAM,IAAIJ,WAAJ,CAAgBG,GAAhB,CAAN;AACD,KAFD,MAEO,IAAIA,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AAChC,YAAM,IAAIL,WAAJ,CAAgBI,GAAhB,CAAN;AACD;;AAED,WAAOA,GAAP;AACD;AATa,CAAhB;AAWA,IAAIE,aAAa,GAAG;AAClBH,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACnC,QAAIG,IAAI,GAAGH,GAAG,CAACI,OAAJ,CAAY,kBAAZ,CAAX;AACA,QAAIC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA5C;AACAE,IAAAA,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,CAAiC,UAAUC,GAAV,EAAe;AAC9C,aAAOC,OAAO,CAACT,IAAR,CAAaQ,GAAb,CAAP;AACD,KAFD,EAHmC,CAK/B;;AAEJ,WAAOX,GAAP;AACD;AATiB,CAApB,C,CAUG;;AAEH,IAAIa,WAAW,GAAG1B,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAI2B,UAAU,GAAGD,WAAW,CAACE,MAAZ,CAAmB,CAACb,aAAD,EAAgBZ,WAAW,EAA3B,EAA+BC,YAAY,EAA3C,EAA+CC,QAAQ,EAAvD,EAA2DM,SAA3D,EAAsET,UAAU,CAAC;AACnH2B,EAAAA,cAAc,EAAEtB;AADmG,CAAD,CAAhF,CAAnB,CAAjB;AAGA,IAAIuB,OAAO,GAAG/B,KAAK,CAAC4B,UAAD,CAAnB;;AAEA,SAASI,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEJ,OAApF;AACA,SAAOG,SAAS,CAAChC,MAAM,CAAC;AACtBoC,IAAAA,YAAY,EAAE;AADQ,GAAD,EAEpBL,OAFoB,CAAP,CAAhB;AAGD;;AAEDD,WAAW,CAACO,gBAAZ,GAA+BR,OAA/B;AACAC,WAAW,CAACtB,WAAZ,GAA0BA,WAA1B;AACAsB,WAAW,CAACrB,WAAZ,GAA0BA,WAA1B;AACA6B,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["\"use strict\";\n\n/* eslint-disable no-empty-function, no-process-env */\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar _require = require('../util/observable'),\n    Observable = _require.Observable;\n\nvar _require2 = require('./errors'),\n    ClientError = _require2.ClientError,\n    ServerError = _require2.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  }\n};\nvar printWarnings = {\n  onResponse: function onResponse(res) {\n    var warn = res.headers['x-sanity-warning'];\n    var warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(function (msg) {\n      return console.warn(msg);\n    }); // eslint-disable-line no-console\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;"]},"metadata":{},"sourceType":"script"}