{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexports.config = {\n  Promise: undefined,\n\n  set useDeprecatedSynchronousErrorHandling(value) {\n    if (value) {\n      var error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  }\n\n};","map":{"version":3,"mappings":";;;;;AAAA,IAAIA,mDAAmD,GAAG,KAA1D;AAMaC,iBAAS;AAKpBC,SAAO,EAAEC,SALW;;AAepB,MAAIC,qCAAJ,CAA0CC,KAA1C,EAAwD;AACtD,QAAIA,KAAJ,EAAW;AACT,UAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAC,aAAO,CAACC,IAAR,CAAa,kGAAkGH,KAAK,CAACI,KAArH;AACD,KAHD,MAGO,IAAIV,mDAAJ,EAAyD;AAC9DQ,aAAO,CAACG,GAAR,CAAY,sDAAZ;AACD;;AACDX,uDAAmD,GAAGK,KAAtD;AACD,GAvBmB;;AAyBpB,MAAID,qCAAJ,GAAyC;AACvC,WAAOJ,mDAAP;AACD;;AA3BmB,CAAT","names":["_enable_super_gross_mode_that_will_cause_bad_things","exports","Promise","undefined","useDeprecatedSynchronousErrorHandling","value","error","Error","console","warn","stack","log"],"sources":["/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/rxjs/src/internal/config.ts"],"sourcesContent":["let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}