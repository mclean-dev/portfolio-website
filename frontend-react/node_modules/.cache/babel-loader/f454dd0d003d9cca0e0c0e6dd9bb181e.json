{"ast":null,"code":"\"use strict\";\n\nvar pubsub = require('nano-pubsub');\n\nvar middlewareReducer = require('./util/middlewareReducer');\n\nvar processOptions = require('./middleware/defaultOptionsProcessor');\n\nvar validateOptions = require('./middleware/defaultOptionsValidator');\n\nvar httpRequester = require('./request'); // node-request in node, browser-request in browsers\n\n\nvar channelNames = ['request', 'response', 'progress', 'error', 'abort'];\nvar middlehooks = ['processOptions', 'validateOptions', 'interceptRequest', 'finalizeOptions', 'onRequest', 'onResponse', 'onError', 'onReturn', 'onHeaders'];\n\nmodule.exports = function createRequester() {\n  var initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : httpRequester;\n  var loadedMiddleware = [];\n  var middleware = middlehooks.reduce(function (ware, name) {\n    ware[name] = ware[name] || [];\n    return ware;\n  }, {\n    processOptions: [processOptions],\n    validateOptions: [validateOptions]\n  });\n\n  function request(opts) {\n    var channels = channelNames.reduce(function (target, name) {\n      target[name] = pubsub();\n      return target;\n    }, {}); // Prepare a middleware reducer that can be reused throughout the lifecycle\n\n    var applyMiddleware = middlewareReducer(middleware); // Parse the passed options\n\n    var options = applyMiddleware('processOptions', opts); // Validate the options\n\n    applyMiddleware('validateOptions', options); // Build a context object we can pass to child handlers\n\n    var context = {\n      options: options,\n      channels: channels,\n      applyMiddleware: applyMiddleware\n    }; // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n\n    var ongoingRequest = null;\n    var unsubscribe = channels.request.subscribe(function (ctx) {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, function (err, res) {\n        return onResponse(err, res, ctx);\n      });\n    }); // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n\n    channels.abort.subscribe(function () {\n      unsubscribe();\n\n      if (ongoingRequest) {\n        ongoingRequest.abort();\n      }\n    }); // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n\n    var returnValue = applyMiddleware('onReturn', channels, context); // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n\n    if (returnValue === channels) {\n      channels.request.publish(context);\n    }\n\n    return returnValue;\n\n    function onResponse(reqErr, res, ctx) {\n      var error = reqErr;\n      var response = res; // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx);\n        } catch (err) {\n          response = null;\n          error = err;\n        }\n      } // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n\n\n      error = error && applyMiddleware('onError', error, ctx); // Figure out if we should publish on error/response channels\n\n      if (error) {\n        channels.error.publish(error);\n      } else if (response) {\n        channels.response.publish(response);\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value');\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error('Tried to add middleware that was a function. It probably expects you to pass options to it.');\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error('Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event');\n    }\n\n    middlehooks.forEach(function (key) {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key]);\n      }\n    });\n    loadedMiddleware.push(newMiddleware);\n    return request;\n  };\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware);\n  };\n\n  initMiddleware.forEach(request.use);\n  return request;\n};","map":{"version":3,"mappings":"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","names":["pubsub","require","middlewareReducer","processOptions","validateOptions","httpRequester","channelNames","middlehooks","module","exports","createRequester","initMiddleware","httpRequest","loadedMiddleware","middleware","reduce","ware","name","request","opts","channels","target","applyMiddleware","options","context","ongoingRequest","unsubscribe","subscribe","ctx","err","res","onResponse","abort","returnValue","publish","reqErr","error","response","use","newMiddleware","Error","onReturn","length","forEach","key","push","clone"],"sources":["/home/mcleanj/projects/portfolio-website/portfolio-website-frontend/node_modules/get-it/src/index.js"],"sourcesContent":["const pubsub = require('nano-pubsub')\nconst middlewareReducer = require('./util/middlewareReducer')\nconst processOptions = require('./middleware/defaultOptionsProcessor')\nconst validateOptions = require('./middleware/defaultOptionsValidator')\nconst httpRequester = require('./request') // node-request in node, browser-request in browsers\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nmodule.exports = function createRequester(initMiddleware = [], httpRequest = httpRequester) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"]},"metadata":{},"sourceType":"script"}