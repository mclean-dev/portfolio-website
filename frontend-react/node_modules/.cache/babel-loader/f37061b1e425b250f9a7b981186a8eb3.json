{"ast":null,"code":"\"use strict\";\n/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\n\nfunction FetchXhr() {\n  this.readyState = 0; // Unsent\n}\n\nFetchXhr.prototype.open = function (method, url) {\n  this._method = method;\n  this._url = url;\n  this._resHeaders = '';\n  this.readyState = 1; // Open\n\n  this.onreadystatechange();\n};\n\nFetchXhr.prototype.abort = function () {\n  if (this._controller) {\n    this._controller.abort();\n  }\n};\n\nFetchXhr.prototype.getAllResponseHeaders = function () {\n  return this._resHeaders;\n};\n\nFetchXhr.prototype.setRequestHeader = function (key, value) {\n  this._headers = this._headers || {};\n  this._headers[key] = value;\n};\n\nFetchXhr.prototype.send = function (body) {\n  var _this = this; // eslint-disable-next-line no-multi-assign\n\n\n  var ctrl = this._controller = typeof AbortController === 'function' && new AbortController();\n  var textBody = this.responseType !== 'arraybuffer';\n  var options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal,\n    body: body\n  }; // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n\n  if (typeof window !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit';\n  }\n\n  fetch(this._url, options).then(function (res) {\n    res.headers.forEach(function (value, key) {\n      _this._resHeaders += \"\".concat(key, \": \").concat(value, \"\\r\\n\");\n    });\n    _this.status = res.status;\n    _this.statusText = res.statusText;\n    _this.readyState = 3; // Loading\n\n    return textBody ? res.text() : res.arrayBuffer();\n  }).then(function (resBody) {\n    if (textBody) {\n      _this.responseText = resBody;\n    } else {\n      _this.response = resBody;\n    }\n\n    _this.readyState = 4; // Done\n\n    _this.onreadystatechange();\n  }).catch(function (err) {\n    if (err.name === 'AbortError') {\n      _this.onabort();\n\n      return;\n    }\n\n    _this.onerror(err);\n  });\n};\n\nmodule.exports = FetchXhr;","map":{"version":3,"mappings":";AAAA;AACA;AACA;;AACA,SAASA,QAAT,GAAoB;AAClB,OAAKC,UAAL,GAAkB,CAAlB,CADkB,CACE;AACrB;;AACDD,QAAQ,CAACE,SAATF,CAAmBG,IAAnBH,GAA0B,UAASI,MAAT,EAAiBC,GAAjB,EAAsB;AAC9C,OAAKC,OAAL,GAAeF,MAAf;AACA,OAAKG,IAAL,GAAYF,GAAZ;AACA,OAAKG,WAAL,GAAmB,EAAnB;AACA,OAAKP,UAAL,GAAkB,CAAlB,CAJ8C,CAI1B;;AACpB,OAAKQ,kBAAL;AALF;;AAOAT,QAAQ,CAACE,SAATF,CAAmBU,KAAnBV,GAA2B,YAAW;AACpC,MAAI,KAAKW,WAAT,EAAsB;AACpB,SAAKA,WAAL,CAAiBD,KAAjB;AACD;AAHH;;AAKAV,QAAQ,CAACE,SAATF,CAAmBY,qBAAnBZ,GAA2C,YAAW;AACpD,SAAO,KAAKQ,WAAZ;AADF;;AAGAR,QAAQ,CAACE,SAATF,CAAmBa,gBAAnBb,GAAsC,UAASc,GAAT,EAAcC,KAAd,EAAqB;AACzD,OAAKC,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;AACA,OAAKA,QAAL,CAAcF,GAAd,IAAqBC,KAArB;AAFF;;AAIAf,QAAQ,CAACE,SAATF,CAAmBiB,IAAnBjB,GAA0B,UAASkB,IAAT,EAAe;AAAA,oBACvC;;;AACA,MAAMC,IAAI,GAAI,KAAKR,WAAL,GAAmB,OAAOS,eAAP,KAA2B,UAA3B,IAAyC,IAAIA,eAAJ,EAA1E;AACA,MAAMC,QAAQ,GAAG,KAAKC,YAAL,KAAsB,aAAvC;AACA,MAAMC,OAAO,GAAG;AACdnB,UAAM,EAAE,KAAKE,OADC;AAEdkB,WAAO,EAAE,KAAKR,QAFA;AAGdS,UAAM,EAAEN,IAAI,IAAIA,IAAI,CAACM,MAHP;AAIdP,QAAI,EAAJA;AAJc,GAAhB,CAJuC,CAWvC;AACA;AACA;;AACA,MAAI,OAAOQ,MAAP,KAAkB,WAAtB,EAAmC;AACjCH,WAAO,CAACI,WAARJ,GAAsB,KAAKK,eAAL,GAAuB,SAAvB,GAAmC,MAAzDL;AACD;;AAEDM,OAAK,CAAC,KAAKtB,IAAN,EAAYgB,OAAZ,CAALM,CACGC,IADHD,CACQ,eAAO;AACXE,OAAG,CAACP,OAAJO,CAAYC,OAAZD,CAAoB,UAAChB,KAAD,EAAQD,GAAR,EAAgB;AAClCmB,WAAI,CAACzB,WAAL,cAAuBM,GAAvB,eAA+BC,KAA/B;AADF;AAGAkB,SAAI,CAACC,MAAL,GAAcH,GAAG,CAACG,MAAlB;AACAD,SAAI,CAACE,UAAL,GAAkBJ,GAAG,CAACI,UAAtB;AACAF,SAAI,CAAChC,UAAL,GAAkB,CAAlB,CANW,CAMS;;AACpB,WAAOoB,QAAQ,GAAGU,GAAG,CAACK,IAAJL,EAAH,GAAgBA,GAAG,CAACM,WAAJN,EAA/B;AARJ,KAUGD,IAVHD,CAUQ,mBAAW;AACf,QAAIR,QAAJ,EAAc;AACZY,WAAI,CAACK,YAAL,GAAoBC,OAApB;AADF,WAEO;AACLN,WAAI,CAACO,QAAL,GAAgBD,OAAhB;AACD;;AACDN,SAAI,CAAChC,UAAL,GAAkB,CAAlB,CANe,CAMK;;AACpBgC,SAAI,CAACxB,kBAAL;AAjBJ,KAmBGgC,KAnBHZ,CAmBS,eAAO;AACZ,QAAIa,GAAG,CAACC,IAAJD,KAAa,YAAjB,EAA+B;AAC7BT,WAAI,CAACW,OAAL;;AACA;AACD;;AAEDX,SAAI,CAACY,OAAL,CAAaH,GAAb;AAzBJ;AAlBF;;AA+CAI,MAAM,CAACC,OAAPD,GAAiB9C,QAAjB8C","names":["FetchXhr","readyState","prototype","open","method","url","_method","_url","_resHeaders","onreadystatechange","abort","_controller","getAllResponseHeaders","setRequestHeader","key","value","_headers","send","body","ctrl","AbortController","textBody","responseType","options","headers","signal","window","credentials","withCredentials","fetch","then","res","forEach","_this","status","statusText","text","arrayBuffer","responseText","resBody","response","catch","err","name","onabort","onerror","module","exports"],"sources":["/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/get-it/src/request/browser/fetchXhr.js"],"sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0 // Unsent\n}\nFetchXhr.prototype.open = function(method, url) {\n  this._method = method\n  this._url = url\n  this._resHeaders = ''\n  this.readyState = 1 // Open\n  this.onreadystatechange()\n}\nFetchXhr.prototype.abort = function() {\n  if (this._controller) {\n    this._controller.abort()\n  }\n}\nFetchXhr.prototype.getAllResponseHeaders = function() {\n  return this._resHeaders\n}\nFetchXhr.prototype.setRequestHeader = function(key, value) {\n  this._headers = this._headers || {}\n  this._headers[key] = value\n}\nFetchXhr.prototype.send = function(body) {\n  // eslint-disable-next-line no-multi-assign\n  const ctrl = (this._controller = typeof AbortController === 'function' && new AbortController())\n  const textBody = this.responseType !== 'arraybuffer'\n  const options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal,\n    body\n  }\n\n  // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n  if (typeof window !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit'\n  }\n\n  fetch(this._url, options)\n    .then(res => {\n      res.headers.forEach((value, key) => {\n        this._resHeaders += `${key}: ${value}\\r\\n`\n      })\n      this.status = res.status\n      this.statusText = res.statusText\n      this.readyState = 3 // Loading\n      return textBody ? res.text() : res.arrayBuffer()\n    })\n    .then(resBody => {\n      if (textBody) {\n        this.responseText = resBody\n      } else {\n        this.response = resBody\n      }\n      this.readyState = 4 // Done\n      this.onreadystatechange()\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        this.onabort()\n        return\n      }\n\n      this.onerror(err)\n    })\n}\n\nmodule.exports = FetchXhr\n"]},"metadata":{},"sourceType":"script"}