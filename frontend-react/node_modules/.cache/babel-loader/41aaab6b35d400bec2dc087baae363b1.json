{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.SanityImageUrlBuilder = factory();\n})(this, function () {\n  var example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n\n  function parseAssetId(ref) {\n    var ref$1 = ref.split('-');\n    var id = ref$1[1];\n    var dimensionString = ref$1[2];\n    var format = ref$1[3];\n\n    if (!id || !dimensionString || !format) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    var ref$2 = dimensionString.split('x');\n    var imgWidthStr = ref$2[0];\n    var imgHeightStr = ref$2[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n\n    if (!isValidAssetId) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    return {\n      id: id,\n      width: width,\n      height: height,\n      format: format\n    };\n  }\n\n  var isRef = function (src) {\n    var source = src;\n    return source ? typeof source._ref === 'string' : false;\n  };\n\n  var isAsset = function (src) {\n    var source = src;\n    return source ? typeof source._id === 'string' : false;\n  };\n\n  var isAssetStub = function (src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === 'string' : false;\n  }; // Convert an asset-id, asset or image to an image record suitable for processing\n  // eslint-disable-next-line complexity\n\n\n  function parseSource(source) {\n    if (!source) {\n      return null;\n    }\n\n    var image;\n\n    if (typeof source === 'string' && isUrl(source)) {\n      // Someone passed an existing image url?\n      image = {\n        asset: {\n          _ref: urlToId(source)\n        }\n      };\n    } else if (typeof source === 'string') {\n      // Just an asset id\n      image = {\n        asset: {\n          _ref: source\n        }\n      };\n    } else if (isRef(source)) {\n      // We just got passed an asset directly\n      image = {\n        asset: source\n      };\n    } else if (isAsset(source)) {\n      // If we were passed an image asset document\n      image = {\n        asset: {\n          _ref: source._id || ''\n        }\n      };\n    } else if (isAssetStub(source)) {\n      // If we were passed a partial asset (`url`, but no `_id`)\n      image = {\n        asset: {\n          _ref: urlToId(source.asset.url)\n        }\n      };\n    } else if (typeof source.asset === 'object') {\n      // Probably an actual image with materialized asset\n      image = source;\n    } else {\n      // We got something that does not look like an image, or it is an image\n      // that currently isn't sporting an asset.\n      return null;\n    }\n\n    var img = source;\n\n    if (img.crop) {\n      image.crop = img.crop;\n    }\n\n    if (img.hotspot) {\n      image.hotspot = img.hotspot;\n    }\n\n    return applyDefaults(image);\n  }\n\n  function isUrl(url) {\n    return /^https?:\\/\\//.test(\"\" + url);\n  }\n\n  function urlToId(url) {\n    var parts = url.split('/').slice(-1);\n    return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n  } // Mock crop and hotspot if image lacks it\n\n\n  function applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n      return image;\n    } // We need to pad in default values for crop or hotspot\n\n\n    var result = Object.assign({}, image);\n\n    if (!result.crop) {\n      result.crop = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n    }\n\n    if (!result.hotspot) {\n      result.hotspot = {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      };\n    }\n\n    return result;\n  }\n\n  var SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop'], ['saturation', 'sat'], ['auto', 'auto'], ['dpr', 'dpr'], ['pad', 'pad']];\n\n  function urlForImage(options) {\n    var spec = Object.assign({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = parseSource(source);\n\n    if (!image) {\n      throw new Error(\"Unable to resolve image URL from source (\" + JSON.stringify(source) + \")\");\n    }\n\n    var id = image.asset._ref || image.asset._id || '';\n    var asset = parseAssetId(id); // Compute crop rect in terms of pixel coordinates in the raw source image\n\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n      left: cropLeft,\n      top: cropTop,\n      width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n      height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    }; // Compute hot spot rect in terms of pixel coordinates\n\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n      left: hotSpotCenterX - hotSpotHorizontalRadius,\n      top: hotSpotCenterY - hotSpotVerticalRadius,\n      right: hotSpotCenterX + hotSpotHorizontalRadius,\n      bottom: hotSpotCenterY + hotSpotVerticalRadius\n    }; // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n      spec = Object.assign({}, spec, fit({\n        crop: crop,\n        hotspot: hotspot\n      }, spec));\n    }\n\n    return specToImageUrl(Object.assign({}, spec, {\n      asset: asset\n    }));\n  } // eslint-disable-next-line complexity\n\n\n  function specToImageUrl(spec) {\n    var cdnUrl = spec.baseUrl || 'https://cdn.sanity.io';\n    var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format;\n    var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n    var params = [];\n\n    if (spec.rect) {\n      // Only bother url with a crop if it actually crops anything\n      var ref = spec.rect;\n      var left = ref.left;\n      var top = ref.top;\n      var width = ref.width;\n      var height = ref.height;\n      var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n\n      if (isEffectiveCrop) {\n        params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n      }\n    }\n\n    if (spec.bg) {\n      params.push(\"bg=\" + spec.bg);\n    }\n\n    if (spec.focalPoint) {\n      params.push(\"fp-x=\" + spec.focalPoint.x);\n      params.push(\"fp-y=\" + spec.focalPoint.y);\n    }\n\n    var flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('');\n\n    if (flip) {\n      params.push(\"flip=\" + flip);\n    } // Map from spec name to url param name, and allow using the actual param name as an alternative\n\n\n    SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n      var specName = mapping[0];\n      var param = mapping[1];\n\n      if (typeof spec[specName] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n      } else if (typeof spec[param] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[param]));\n      }\n    });\n\n    if (params.length === 0) {\n      return baseUrl;\n    }\n\n    return baseUrl + \"?\" + params.join('&');\n  }\n\n  function fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height; // If we are not constraining the aspect ratio, we'll just use the whole crop\n\n    if (!(imgWidth && imgHeight)) {\n      return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: source.crop\n      };\n    }\n\n    var crop = source.crop;\n    var hotspot = source.hotspot; // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n\n    if (cropAspectRatio > desiredAspectRatio) {\n      // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n      var height = Math.round(crop.height);\n      var width = Math.round(height * desiredAspectRatio);\n      var top = Math.max(0, Math.round(crop.top)); // Center output horizontally over hotspot\n\n      var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n      var left = Math.max(0, Math.round(hotspotXCenter - width / 2)); // Keep output within crop\n\n      if (left < crop.left) {\n        left = crop.left;\n      } else if (left + width > crop.left + crop.width) {\n        left = crop.left + crop.width - width;\n      }\n\n      cropRect = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n    } else {\n      // The crop is taller than the desired ratio, we are cutting from top and bottom\n      var width$1 = crop.width;\n      var height$1 = Math.round(width$1 / desiredAspectRatio);\n      var left$1 = Math.max(0, Math.round(crop.left)); // Center output vertically over hotspot\n\n      var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n      var top$1 = Math.max(0, Math.round(hotspotYCenter - height$1 / 2)); // Keep output rect within crop\n\n      if (top$1 < crop.top) {\n        top$1 = crop.top;\n      } else if (top$1 + height$1 > crop.top + crop.height) {\n        top$1 = crop.top + crop.height - height$1;\n      }\n\n      cropRect = {\n        left: left$1,\n        top: top$1,\n        width: width$1,\n        height: height$1\n      };\n    }\n\n    return {\n      width: imgWidth,\n      height: imgHeight,\n      rect: cropRect\n    };\n  } // For backwards-compatibility\n\n\n  var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\n  var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n  var validAutoModes = ['format'];\n\n  function isSanityClientLike(client) {\n    return client ? typeof client.clientConfig === 'object' : false;\n  }\n\n  function rewriteSpecName(key) {\n    var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n\n    for (var i = 0, list = specs; i < list.length; i += 1) {\n      var entry = list[i];\n      var specName = entry[0];\n      var param = entry[1];\n\n      if (key === specName || key === param) {\n        return specName;\n      }\n    }\n\n    return key;\n  }\n\n  function urlBuilder(options) {\n    // Did we get a SanityClient?\n    var client = options;\n\n    if (isSanityClientLike(client)) {\n      // Inherit config from client\n      var ref = client.clientConfig;\n      var apiUrl = ref.apiHost;\n      var projectId = ref.projectId;\n      var dataset = ref.dataset;\n      var apiHost = apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: projectId,\n        dataset: dataset\n      });\n    } // Or just accept the options as given\n\n\n    return new ImageUrlBuilder(null, options);\n  }\n\n  var ImageUrlBuilder = function ImageUrlBuilder(parent, options) {\n    this.options = parent ? Object.assign({}, parent.options || {}, options || {}) // Merge parent options\n    : Object.assign({}, options || {}); // Copy options\n  };\n\n  ImageUrlBuilder.prototype.withOptions = function withOptions(options) {\n    var baseUrl = options.baseUrl || this.options.baseUrl;\n    var newOptions = {\n      baseUrl: baseUrl\n    };\n\n    for (var key in options) {\n      if (options.hasOwnProperty(key)) {\n        var specKey = rewriteSpecName(key);\n        newOptions[specKey] = options[key];\n      }\n    }\n\n    return new ImageUrlBuilder(this, Object.assign({}, {\n      baseUrl: baseUrl\n    }, newOptions));\n  }; // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n\n\n  ImageUrlBuilder.prototype.image = function image(source) {\n    return this.withOptions({\n      source: source\n    });\n  }; // Specify the dataset\n\n\n  ImageUrlBuilder.prototype.dataset = function dataset(dataset$1) {\n    return this.withOptions({\n      dataset: dataset$1\n    });\n  }; // Specify the projectId\n\n\n  ImageUrlBuilder.prototype.projectId = function projectId(projectId$1) {\n    return this.withOptions({\n      projectId: projectId$1\n    });\n  }; // Specify background color\n\n\n  ImageUrlBuilder.prototype.bg = function bg(bg$1) {\n    return this.withOptions({\n      bg: bg$1\n    });\n  }; // Set DPR scaling factor\n\n\n  ImageUrlBuilder.prototype.dpr = function dpr(dpr$1) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr$1 && dpr$1 !== 1 ? {\n      dpr: dpr$1\n    } : {});\n  }; // Specify the width of the image in pixels\n\n\n  ImageUrlBuilder.prototype.width = function width(width$1) {\n    return this.withOptions({\n      width: width$1\n    });\n  }; // Specify the height of the image in pixels\n\n\n  ImageUrlBuilder.prototype.height = function height(height$1) {\n    return this.withOptions({\n      height: height$1\n    });\n  }; // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n\n\n  ImageUrlBuilder.prototype.focalPoint = function focalPoint(x, y) {\n    return this.withOptions({\n      focalPoint: {\n        x: x,\n        y: y\n      }\n    });\n  };\n\n  ImageUrlBuilder.prototype.maxWidth = function maxWidth(maxWidth$1) {\n    return this.withOptions({\n      maxWidth: maxWidth$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.minWidth = function minWidth(minWidth$1) {\n    return this.withOptions({\n      minWidth: minWidth$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.maxHeight = function maxHeight(maxHeight$1) {\n    return this.withOptions({\n      maxHeight: maxHeight$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.minHeight = function minHeight(minHeight$1) {\n    return this.withOptions({\n      minHeight: minHeight$1\n    });\n  }; // Specify width and height in pixels\n\n\n  ImageUrlBuilder.prototype.size = function size(width, height) {\n    return this.withOptions({\n      width: width,\n      height: height\n    });\n  }; // Specify blur between 0 and 100\n\n\n  ImageUrlBuilder.prototype.blur = function blur(blur$1) {\n    return this.withOptions({\n      blur: blur$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.sharpen = function sharpen(sharpen$1) {\n    return this.withOptions({\n      sharpen: sharpen$1\n    });\n  }; // Specify the desired rectangle of the image\n\n\n  ImageUrlBuilder.prototype.rect = function rect(left, top, width, height) {\n    return this.withOptions({\n      rect: {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      }\n    });\n  }; // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n\n\n  ImageUrlBuilder.prototype.format = function format(format$1) {\n    return this.withOptions({\n      format: format$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.invert = function invert(invert$1) {\n    return this.withOptions({\n      invert: invert$1\n    });\n  }; // Rotation in degrees 0, 90, 180, 270\n\n\n  ImageUrlBuilder.prototype.orientation = function orientation(orientation$1) {\n    return this.withOptions({\n      orientation: orientation$1\n    });\n  }; // Compression quality 0-100\n\n\n  ImageUrlBuilder.prototype.quality = function quality(quality$1) {\n    return this.withOptions({\n      quality: quality$1\n    });\n  }; // Make it a download link. Parameter is default filename.\n\n\n  ImageUrlBuilder.prototype.forceDownload = function forceDownload(download) {\n    return this.withOptions({\n      download: download\n    });\n  }; // Flip image horizontally\n\n\n  ImageUrlBuilder.prototype.flipHorizontal = function flipHorizontal() {\n    return this.withOptions({\n      flipHorizontal: true\n    });\n  }; // Flip image vertically\n\n\n  ImageUrlBuilder.prototype.flipVertical = function flipVertical() {\n    return this.withOptions({\n      flipVertical: true\n    });\n  }; // Ignore crop/hotspot from image record, even when present\n\n\n  ImageUrlBuilder.prototype.ignoreImageParams = function ignoreImageParams() {\n    return this.withOptions({\n      ignoreImageParams: true\n    });\n  };\n\n  ImageUrlBuilder.prototype.fit = function fit(value) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(\"Invalid fit mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      fit: value\n    });\n  };\n\n  ImageUrlBuilder.prototype.crop = function crop(value) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(\"Invalid crop mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      crop: value\n    });\n  }; // Saturation\n\n\n  ImageUrlBuilder.prototype.saturation = function saturation(saturation$1) {\n    return this.withOptions({\n      saturation: saturation$1\n    });\n  };\n\n  ImageUrlBuilder.prototype.auto = function auto(value) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(\"Invalid auto mode \\\"\" + value + \"\\\"\");\n    }\n\n    return this.withOptions({\n      auto: value\n    });\n  }; // Specify the number of pixels to pad the image\n\n\n  ImageUrlBuilder.prototype.pad = function pad(pad$1) {\n    return this.withOptions({\n      pad: pad$1\n    });\n  }; // Gets the url based on the submitted parameters\n\n\n  ImageUrlBuilder.prototype.url = function url() {\n    return urlForImage(this.options);\n  }; // Alias for url()\n\n\n  ImageUrlBuilder.prototype.toString = function toString() {\n    return this.url();\n  };\n\n  return urlBuilder;\n});","map":{"version":3,"mappings":"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","names":["const","example","parseAssetId","ref","split","id","dimensionString","format","Error","imgWidthStr","imgHeightStr","width","height","isValidAssetId","isFinite","isRef","src","source","_ref","isAsset","_id","isAssetStub","asset","url","parseSource","image","isUrl","urlToId","img","crop","hotspot","applyDefaults","test","parts","slice","replace","result","Object","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","stringify","cropLeft","Math","round","cropTop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","rect","focalPoint","ignoreImageParams","fit","specToImageUrl","cdnUrl","baseUrl","filename","projectId","dataset","params","isEffectiveCrop","push","bg","flip","flipHorizontal","flipVertical","filter","Boolean","join","forEach","mapping","specName","param","encodeURIComponent","length","cropRect","imgWidth","imgHeight","desiredAspectRatio","cropAspectRatio","max","hotspotXCenter","hotspotYCenter","validFits","validCrops","validAutoModes","isSanityClientLike","client","clientConfig","rewriteSpecName","key","specs","entry","urlBuilder","apiUrl","apiHost","ImageUrlBuilder","constructor","parent","withOptions","newOptions","hasOwnProperty","specKey","dpr","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","value","indexOf","saturation","auto","pad","toString"],"sources":["/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/@sanity/image-url/src/parseAssetId.ts","/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/@sanity/image-url/src/parseSource.ts","/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/@sanity/image-url/src/urlForImage.ts","/home/mcleanj/projects/portfolio-website/frontend-react/node_modules/@sanity/image-url/src/builder.ts"],"sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}