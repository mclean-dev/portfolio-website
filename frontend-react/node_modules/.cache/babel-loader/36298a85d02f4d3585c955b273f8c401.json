{"ast":null,"code":"// ISC @ Julien Fontanet\n\"use strict\"; // ===================================================================\n\nvar construct = typeof Reflect !== \"undefined\" ? Reflect.construct : undefined;\nvar defineProperty = Object.defineProperty; // -------------------------------------------------------------------\n\nvar captureStackTrace = Error.captureStackTrace;\n\nif (captureStackTrace === undefined) {\n  captureStackTrace = function captureStackTrace(error) {\n    var container = new Error();\n    defineProperty(error, \"stack\", {\n      configurable: true,\n      get: function getStack() {\n        var stack = container.stack; // Replace property with value for faster future accesses.\n\n        defineProperty(this, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true\n        });\n        return stack;\n      },\n      set: function setStack(stack) {\n        defineProperty(error, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true\n        });\n      }\n    });\n  };\n} // -------------------------------------------------------------------\n\n\nfunction BaseError(message) {\n  if (message !== undefined) {\n    defineProperty(this, \"message\", {\n      configurable: true,\n      value: message,\n      writable: true\n    });\n  }\n\n  var cname = this.constructor.name;\n\n  if (cname !== undefined && cname !== this.name) {\n    defineProperty(this, \"name\", {\n      configurable: true,\n      value: cname,\n      writable: true\n    });\n  }\n\n  captureStackTrace(this, this.constructor);\n}\n\nBaseError.prototype = Object.create(Error.prototype, {\n  // See: https://github.com/JsCommunity/make-error/issues/4\n  constructor: {\n    configurable: true,\n    value: BaseError,\n    writable: true\n  }\n}); // -------------------------------------------------------------------\n// Sets the name of a function if possible (depends of the JS engine).\n\nvar setFunctionName = function () {\n  function setFunctionName(fn, name) {\n    return defineProperty(fn, \"name\", {\n      configurable: true,\n      value: name\n    });\n  }\n\n  try {\n    var f = function () {};\n\n    setFunctionName(f, \"foo\");\n\n    if (f.name === \"foo\") {\n      return setFunctionName;\n    }\n  } catch (_) {}\n}(); // -------------------------------------------------------------------\n\n\nfunction makeError(constructor, super_) {\n  if (super_ == null || super_ === Error) {\n    super_ = BaseError;\n  } else if (typeof super_ !== \"function\") {\n    throw new TypeError(\"super_ should be a function\");\n  }\n\n  var name;\n\n  if (typeof constructor === \"string\") {\n    name = constructor;\n    constructor = construct !== undefined ? function () {\n      return construct(super_, arguments, this.constructor);\n    } : function () {\n      super_.apply(this, arguments);\n    }; // If the name can be set, do it once and for all.\n\n    if (setFunctionName !== undefined) {\n      setFunctionName(constructor, name);\n      name = undefined;\n    }\n  } else if (typeof constructor !== \"function\") {\n    throw new TypeError(\"constructor should be either a string or a function\");\n  } // Also register the super constructor also as `constructor.super_` just\n  // like Node's `util.inherits()`.\n  //\n  // eslint-disable-next-line dot-notation\n\n\n  constructor.super_ = constructor[\"super\"] = super_;\n  var properties = {\n    constructor: {\n      configurable: true,\n      value: constructor,\n      writable: true\n    }\n  }; // If the name could not be set on the constructor, set it on the\n  // prototype.\n\n  if (name !== undefined) {\n    properties.name = {\n      configurable: true,\n      value: name,\n      writable: true\n    };\n  }\n\n  constructor.prototype = Object.create(super_.prototype, properties);\n  return constructor;\n}\n\nexports = module.exports = makeError;\nexports.BaseError = BaseError;","map":{"version":3,"sources":["/home/mcleanj/projects/portfolio-website/portfolio-website-frontend/node_modules/make-error/index.js"],"names":["construct","Reflect","undefined","defineProperty","Object","captureStackTrace","Error","error","container","configurable","get","getStack","stack","value","writable","set","setStack","BaseError","message","cname","constructor","name","prototype","create","setFunctionName","fn","f","_","makeError","super_","TypeError","arguments","apply","properties","exports","module"],"mappings":"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","sourcesContent":["// ISC @ Julien Fontanet\n\n\"use strict\";\n\n// ===================================================================\n\nvar construct = typeof Reflect !== \"undefined\" ? Reflect.construct : undefined;\nvar defineProperty = Object.defineProperty;\n\n// -------------------------------------------------------------------\n\nvar captureStackTrace = Error.captureStackTrace;\nif (captureStackTrace === undefined) {\n  captureStackTrace = function captureStackTrace(error) {\n    var container = new Error();\n\n    defineProperty(error, \"stack\", {\n      configurable: true,\n      get: function getStack() {\n        var stack = container.stack;\n\n        // Replace property with value for faster future accesses.\n        defineProperty(this, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true,\n        });\n\n        return stack;\n      },\n      set: function setStack(stack) {\n        defineProperty(error, \"stack\", {\n          configurable: true,\n          value: stack,\n          writable: true,\n        });\n      },\n    });\n  };\n}\n\n// -------------------------------------------------------------------\n\nfunction BaseError(message) {\n  if (message !== undefined) {\n    defineProperty(this, \"message\", {\n      configurable: true,\n      value: message,\n      writable: true,\n    });\n  }\n\n  var cname = this.constructor.name;\n  if (cname !== undefined && cname !== this.name) {\n    defineProperty(this, \"name\", {\n      configurable: true,\n      value: cname,\n      writable: true,\n    });\n  }\n\n  captureStackTrace(this, this.constructor);\n}\n\nBaseError.prototype = Object.create(Error.prototype, {\n  // See: https://github.com/JsCommunity/make-error/issues/4\n  constructor: {\n    configurable: true,\n    value: BaseError,\n    writable: true,\n  },\n});\n\n// -------------------------------------------------------------------\n\n// Sets the name of a function if possible (depends of the JS engine).\nvar setFunctionName = (function() {\n  function setFunctionName(fn, name) {\n    return defineProperty(fn, \"name\", {\n      configurable: true,\n      value: name,\n    });\n  }\n  try {\n    var f = function() {};\n    setFunctionName(f, \"foo\");\n    if (f.name === \"foo\") {\n      return setFunctionName;\n    }\n  } catch (_) {}\n})();\n\n// -------------------------------------------------------------------\n\nfunction makeError(constructor, super_) {\n  if (super_ == null || super_ === Error) {\n    super_ = BaseError;\n  } else if (typeof super_ !== \"function\") {\n    throw new TypeError(\"super_ should be a function\");\n  }\n\n  var name;\n  if (typeof constructor === \"string\") {\n    name = constructor;\n    constructor =\n      construct !== undefined\n        ? function() {\n            return construct(super_, arguments, this.constructor);\n          }\n        : function() {\n            super_.apply(this, arguments);\n          };\n\n    // If the name can be set, do it once and for all.\n    if (setFunctionName !== undefined) {\n      setFunctionName(constructor, name);\n      name = undefined;\n    }\n  } else if (typeof constructor !== \"function\") {\n    throw new TypeError(\"constructor should be either a string or a function\");\n  }\n\n  // Also register the super constructor also as `constructor.super_` just\n  // like Node's `util.inherits()`.\n  //\n  // eslint-disable-next-line dot-notation\n  constructor.super_ = constructor[\"super\"] = super_;\n\n  var properties = {\n    constructor: {\n      configurable: true,\n      value: constructor,\n      writable: true,\n    },\n  };\n\n  // If the name could not be set on the constructor, set it on the\n  // prototype.\n  if (name !== undefined) {\n    properties.name = {\n      configurable: true,\n      value: name,\n      writable: true,\n    };\n  }\n  constructor.prototype = Object.create(super_.prototype, properties);\n\n  return constructor;\n}\nexports = module.exports = makeError;\nexports.BaseError = BaseError;\n"]},"metadata":{},"sourceType":"script"}